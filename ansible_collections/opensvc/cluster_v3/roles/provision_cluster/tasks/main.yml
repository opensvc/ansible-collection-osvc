---
# Tasks file for provision_cluster

- name: Distribution
  ansible.builtin.debug:
    msg: "{{ ansible_distribution }}"

- name: Distribution version
  ansible.builtin.debug:
    msg: "{{ ansible_distribution_version }}"

- name: Distribution major version
  ansible.builtin.debug:
    msg: "{{ ansible_distribution_major_version }}"

- name: Determine OpenSVC repository URL
  ansible.builtin.set_fact:
    opensvc_repo_url: >-
      {{
        provision_cluster_repositories[ansible_distribution]
          .get(ansible_distribution_major_version,
               provision_cluster_repositories[ansible_distribution].default)
      }}

- name: Deploy per OS prerequisites and install osvc package
  ansible.builtin.include_tasks: "install-{{ ansible_distribution }}.yml"

- name: Wait for monitor to be idle
  ansible.builtin.command: |
    om node event --filter 'NodeMonitorUpdated,node={{ inventory_hostname }},node_monitor.state="idle"' --wait --duration 15s
  changed_when: false

- name: Debug node count
  ansible.builtin.debug:
    var: provision_cluster_nodecount
    verbosity: 2

- name: Update /etc/hosts file
  ansible.builtin.blockinfile:
    dest: /etc/hosts
    content: "{{ lookup('template', 'templates/hosts.j2') }}"
    state: present
  when:
    - provision_cluster_update_etc_hosts | bool

- name: Enable ssh root access accross cluster nodes
  ansible.builtin.replace:
    dest: /etc/ssh/sshd_config
    regexp: '^PermitRootLogin (yes|without-password)'
    replace: "PermitRootLogin prohibit-password"
  notify: Reload sshd
  when:
    - provision_cluster_configure_ssh_trust | bool

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Enable sysrq trigger
  ansible.posix.sysctl:
    name: kernel.sysrq
    value: '1'
    state: present
    sysctl_file: /etc/sysctl.d/99-opensvc-sysrq.conf
    sysctl_set: true

########################## FIRST NODE ##########################

- name: Get current cluster name
  ansible.builtin.command: om cluster get --kw cluster.name
  register: clustername
  changed_when: false
  failed_when: false
  when:
    - inventory_hostname == ansible_play_hosts[0]

- name: Set cluster name
  ansible.builtin.command: "om cluster set --kw cluster.name={{ provision_cluster_clustername }}"
  register: output
  changed_when: output.rc == 0
  when:
    - inventory_hostname == ansible_play_hosts[0]
    - clustername.stdout != provision_cluster_clustername

- name: Get cluster token on first node
  ansible.builtin.command: "om daemon auth token --role join"
  register: clustertoken
  changed_when: false
  failed_when: clustertoken.rc != 0
  run_once: true

- name: Debug cluster token
  ansible.builtin.debug:
    msg: "Cluster join token: {{ clustertoken.stdout }}"
    verbosity: 2

########################## OTHER NODES ##########################

- name: Check other nodes are joined to a cluster
  ansible.builtin.command: om cluster get --kw cluster.nodes
  register: clusternodes
  changed_when: false
  failed_when: false
  run_once: true
  when:
    - provision_cluster_nodecount | int > 1

- name: Debug cluster nodes output
  ansible.builtin.debug:
    var: clusternodes.stdout
    verbosity: 2

- name: Set joined status for nodes
  ansible.builtin.set_fact:
    joined: "{{ inventory_hostname in clusternodes.stdout }}"
  when:
    - provision_cluster_nodecount | int > 1

- name: Debug joined status
  ansible.builtin.debug:
    msg: "Joined status: {{ joined }}"
    verbosity: 2

- name: Join other nodes to the cluster
  ansible.builtin.command: >
    om daemon join --node {{ hostvars[ansible_play_hosts[0]].ansible_hostname }} --token {{ hostvars[ansible_play_hosts[0]].clustertoken.stdout }}
  async: 30
  poll: 0
  register: join_output
  changed_when: false
  throttle: 1
  when:
    - provision_cluster_nodecount | int > 1
    - inventory_hostname != ansible_play_hosts[0]
    - not joined

- name: Debug join_output
  ansible.builtin.debug:
    var: join_output
    verbosity: 2
  when: not joined

- name: Check async job status for joining node
  ansible.builtin.async_status:
    jid: "{{ join_output.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  retries: 10
  delay: 5
  when:
    - join_output is defined
    - join_output.ansible_job_id is defined
    - not joined

- name: Check if join command was successful
  ansible.builtin.debug:
    msg: "Join successful!"
  when:
    - provision_cluster_nodecount | int > 1
    - inventory_hostname != ansible_play_hosts[0]
    - not joined
    - job_result is defined
    - job_result.rc == 0

- name: Unfreeze cluster
  ansible.builtin.command: 'om cluster thaw --wait'
  register: output
  changed_when: output.rc == 0
  when:
    - provision_cluster_nodecount | int > 1
    - inventory_hostname == ansible_play_hosts[0]

- name: Add mutual root ssh trust
  ansible.builtin.command: 'om node update ssh authorized keys --node "*"'
  register: output
  changed_when: output.rc == 0
  throttle: 1
  when:
    - provision_cluster_nodecount | int > 1
    - provision_cluster_configure_ssh_trust | bool

- name: Configure cluster vip
  ansible.builtin.include_tasks: "vip.yml"
  when:
    - provision_cluster_configure_vip | bool

- name: Disable iptables usage by docker
  ansible.builtin.include_tasks: "docker.yml"
  when:
    - provision_cluster_deploy_docker_daemon_json | bool
