---
- name: Set fact on vip creation
  ansible.builtin.set_fact:
    vip_created: true
  run_once: true

- name: Check for vip existence
  ansible.builtin.command: "om system/svc/vip ls"
  changed_when: false
  register: svcvip
  run_once: true
  failed_when: false

- name: Set fact according to actual vip existence
  ansible.builtin.set_fact:
    vip_created: false
  run_once: true
  when:
    - svcvip.rc !=0 or "'system/svc/vip' not in svcvip.stdout"

- name: Identify node ip used for production
  ansible.builtin.shell: set -o pipefail && grep -w "{{ ansible_hostname }}$" /etc/hosts | head -1 | awk '{print $1}'
  args:
    executable: /bin/bash
  changed_when: false
  register: grepquery
  when:
    - not vip_created

- name: Set fact according to command result
  ansible.builtin.set_fact:
    osvc_node_prd_ip: "{{ grepquery.stdout }}"
  when:
    - not vip_created

- name: Identify node nic used for production
  ansible.builtin.shell: set -o pipefail && ip route ls | grep -w {{ osvc_node_prd_ip }} | head -1 | grep -Po '(?<=dev )(\S+)'
  args:
    executable: /bin/bash
  register: iproutequery
  changed_when: false
  when:
    - not vip_created

- name: Set fact according to command result
  ansible.builtin.set_fact:
    provision_cluster_node_prd_nic: "{{ iproutequery.stdout }}"
  when:
    - not vip_created

- name: Set fact for provision_cluster_vip_network
  ansible.builtin.set_fact:
    provision_cluster_vip_network: "{{ provision_cluster_vip_addr }}/{{ provision_cluster_vip_cidr_subnet }}"
  when:
    - not vip_created

- name: Set fact for provision_cluster_vip_expression
  ansible.builtin.set_fact:
    provision_cluster_vip_expression: "{{ provision_cluster_vip_network }}@{{ provision_cluster_node_prd_nic }}"
  when:
    - not vip_created

- name: Add cluster vip
  ansible.builtin.command: "{{ item }}"
  throttle: 1
  register: output
  changed_when: output.rc == 0
  run_once: true
  with_items:
    - om cluster set --kw cluster.vip={{ provision_cluster_vip_expression }}
    - sleep {{ provision_cluster_opensvc_command_delay }}
  when:
    - not vip_created
    - provision_cluster_nodecount|int > 1

- name: Add cluster vip (single-node)
  ansible.builtin.command: >
    om cluster set --kw cluster.vip=
    {{ provision_cluster_vip_addr }}/{{ provision_cluster_vip_cidr_subnet }}@{{ provision_cluster_node_prd_nic }}
  run_once: true
  register: output
  changed_when: output.rc == 0
  when:
    - not vip_created
    - provision_cluster_nodecount|int == 1

- name: Set fact for filter expression
  ansible.builtin.set_fact:
    provision_cluster_filter_expression: "'InstanceConfigUpdated,path=system/svc/vip,node={{ ansible_play_hosts[0] }},instance_status.overall=\"up\"'"
  when:
    - not vip_created

- name: Debug filter expression
  ansible.builtin.debug:
    var: provision_cluster_filter_expression
    verbosity: 2
  when:
    - not vip_created

- name: Wait for vip service instance to be spawned
  ansible.builtin.command: om node event --filter {{ provision_cluster_filter_expression }} --wait --duration 15s
  run_once: true
  changed_when: false
  when:
    - not vip_created

- name: Unfreeze vip service
  ansible.builtin.command: 'om system/svc/vip thaw'
  run_once: true
  register: output
  changed_when: output.rc == 0
  when:
    - not vip_created
