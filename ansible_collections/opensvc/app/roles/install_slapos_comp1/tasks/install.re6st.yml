---

- name: Set fact on re6st existence
  ansible.builtin.set_fact:
    re6st_is_installed: 'true'

- name: Check for re6st existence
  ansible.builtin.stat:
    path: /etc/re6stnet/re6stnet.conf
  register: re6stnetcfg

- name: Set fact according to actual re6st existence
  ansible.builtin.set_fact:
    re6st_is_installed: 'false'
  when:
    - not re6stnetcfg.stat.exists

- name: Download re6st installer
  ansible.builtin.get_url:
    url: "{{ osvc_re6st_installer_url }}"
    dest: /root/re6st.installer
    mode: '0750'
    force: true
  when:
    - not re6st_is_installed

- name: Add extra_vars to avoid being prompted for re6st token and router adv
  ansible.builtin.lineinfile:
    path: /root/re6st.installer
    regexp: ^(ansible-playbook gnet-re6stnet.yml -i hosts --connection=local)$
    line: >
      ANSIBLE_LOG_PATH=~/ansible.re6st.log \g<1>
      --extra-vars re6sttoken={{ osvc_re6st_token }}
      --extra-vars enable_router_advertisement={{ osvc_re6st_router_advertisement }}
    backrefs: true
  when:
    - not re6st_is_installed

- name: Launch re6st installer on first node
  ansible.builtin.command: /root/re6st.installer
  register: re6stlogn1
  changed_when: re6stlogn1.rc == 0
  when:
    - not re6st_is_installed
    - inventory_hostname == ansible_play_hosts[0]

- name: Print return information from the previous task
  ansible.builtin.debug:
    var: re6stlogn1.stdout_lines
    verbosity: 2
  when:
    - not re6st_is_installed
    - inventory_hostname == ansible_play_hosts[0]

- name: Get Service Status
  ansible.builtin.systemd:
    name: "re6stnet.service"
  register: re6st_service_status
  when:
    - not re6st_is_installed
    - inventory_hostname == ansible_play_hosts[0]

- name: Print systemd service status
  ansible.builtin.debug:
    var: re6st_service_status.status.ActiveState
    verbosity: 2
  when:
    - not re6st_is_installed
    - inventory_hostname == ansible_play_hosts[0]

- name: Ensure re6st is started
  ansible.builtin.service:
    name: re6stnet.service
    state: started
  register: re6st_unit_details_n1
  until: re6st_unit_details_n1.status.ActiveState == "active"
  retries: 30
  delay: 2
  when:
    - not re6st_is_installed
    - inventory_hostname == ansible_play_hosts[0]

- name: Ensure re6st has finished its initialization
  ansible.builtin.shell:
    cmd: grep "^registry " /etc/re6stnet/re6stnet.conf
  args:
    executable: /bin/bash
  changed_when: false
  register: cmd_res
  retries: 30
  delay: 1
  until: cmd_res.stdout_lines | list | count > 0
  when:
    - not re6st_is_installed
    - inventory_hostname == ansible_play_hosts[0]

- name: Ensure ipv6 routes are properly configured
  ansible.builtin.shell:
    cmd: set -o pipefail && ip -6 r | grep -wv ^unreachable | grep 'dev re6stnet.* proto babel'
  args:
    executable: /bin/bash
  changed_when: false
  register: cmd_res
  retries: 180
  delay: 10
  until: cmd_res.stdout_lines | list | count > 0
  when:
    - not re6st_is_installed
    - inventory_hostname == ansible_play_hosts[0]

- name: Disable and mask re6stnet.service systemd unit
  ansible.builtin.systemd:
    name: re6stnet.service
    enabled: false
    masked: true
    state: stopped
  when:
    - not re6st_is_installed
    - inventory_hostname == ansible_play_hosts[0]

# re6st is now installed on first node
# we failover the service on second node to proceed with the install

- name: Switch service to second node
  ansible.builtin.command: "om {{ osvc_slapos_comp1_svcpath }} switch --wait"
  register: output
  changed_when: output.rc == 0
  when:
    - not re6st_is_installed
    - inventory_hostname == ansible_play_hosts[0]

- name: Wait for service state up on second node
  ansible.builtin.script:
    cmd: ./files/osvc_wait.sh {{ ansible_hostname }} {{ osvc_slapos_comp1_svcpath }} avail up 300
  changed_when: false
  when:
    - not re6st_is_installed
    - inventory_hostname == ansible_play_hosts[1]

- name: Wait until the file /etc/re6stnet/re6stnet.conf is present
  ansible.builtin.wait_for:
    path: /etc/re6stnet/re6stnet.conf
  when:
    - not re6st_is_installed
    - inventory_hostname == ansible_play_hosts[1]

- name: Launch re6st installer on second node
  ansible.builtin.command: /root/re6st.installer
  register: output
  changed_when: output.rc == 0
  when:
    - not re6st_is_installed
    - inventory_hostname != ansible_play_hosts[0]

- name: Ensure re6st is started on second node
  ansible.builtin.service:
    name: re6stnet.service
    state: started
  register: re6st_unit_details_n2
  until: re6st_unit_details_n2.status.ActiveState == "active"
  retries: 30
  delay: 2
  when:
    - not re6st_is_installed
    - inventory_hostname != ansible_play_hosts[0]

- name: Disable and mask re6stnet.service systemd unit
  ansible.builtin.systemd:
    name: re6stnet.service
    enabled: false
    masked: true
    state: stopped
  when:
    - not re6st_is_installed
    - inventory_hostname != ansible_play_hosts[0]

# re6st is now installed on second node
# app management is no more under systemd control
# we enable opensvc application resource
# we failover the service on primary node

- name: Enable re6st app management with OpenSVC
  ansible.builtin.command: "om {{ osvc_slapos_comp1_svcpath }} enable --rid app#0"
  register: output
  changed_when: output.rc == 0
  when:
    - not re6st_is_installed
    - inventory_hostname == ansible_play_hosts[1]

- name: Force status evaluation
  ansible.builtin.command: "om {{ osvc_slapos_comp1_svcpath }} print status -r"
  changed_when: false
  when:
    - not re6st_is_installed
    - inventory_hostname == ansible_play_hosts[1]

- name: Switch service to first node
  ansible.builtin.command: "om {{ osvc_slapos_comp1_svcpath }} switch --wait"
  register: output
  changed_when: output.rc == 0
  when:
    - not re6st_is_installed
    - inventory_hostname == ansible_play_hosts[1]

- name: Wait for service state up on first node
  ansible.builtin.script:
    cmd: ./files/osvc_wait.sh {{ ansible_hostname }} {{ osvc_slapos_comp1_svcpath }} avail up 300
  changed_when: false
  when:
    - not re6st_is_installed
    - inventory_hostname == ansible_play_hosts[0]

- name: Wait until the file /etc/re6stnet/re6stnet.conf is present
  ansible.builtin.wait_for:
    path: /etc/re6stnet/re6stnet.conf
  when:
    - not re6st_is_installed
    - inventory_hostname == ansible_play_hosts[0]
