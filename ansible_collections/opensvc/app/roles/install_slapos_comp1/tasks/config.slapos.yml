---

- name: Ensure service is running on first node
  ansible.builtin.command: "om {{ install_slapos_comp1_svcpath }} takeover --wait"
  register: output
  changed_when: output.rc == 0
  when:
    - inventory_hostname == ansible_play_hosts[0]

- name: Get fs install root
  ansible.builtin.command: "om {{ install_slapos_comp1_svcpath }} eval --kw fs#0.mnt"
  register: output
  changed_when: output.rc == 0
  when:
    - inventory_hostname == ansible_play_hosts[0]

- name: Remove slapos crontab on first node
  ansible.builtin.file:
    path: /etc/cron.d/slapos-node
    state: absent

- name: Set fact on slapos existence
  ansible.builtin.set_fact:
    slapos_root: "{{ output.stdout }}/slapos"
    slapos_etc: "{{ output.stdout }}/slapos/etc/opt/slapos"
    slapos_log: "{{ output.stdout }}/slapos/log"
    slapos_soft: "{{ output.stdout }}/slapos/opt/slapgrid"
    slapos_inst: "{{ output.stdout }}/slapos/srv/slapgrid"
  when:
    - inventory_hostname == ansible_play_hosts[0]

- name: Check if configuration already exists
  stat: path="{{ slapos_etc }}/slapos.cfg"
  register: slapos_conf
  when:
    - inventory_hostname == ansible_play_hosts[0]

- name: Configure slapos with slapos node register
  shell: slapos node register --cfg {{ slapos_etc }}/slapos.cfg --token {{ install_slapos_comp1_token }} --master-url {{ install_slapos_comp1_master_url }} --master-url-web {{ install_slapos_comp1_web_master_url }} --interface-name {{ install_slapos_comp1_interface_name }} --partition-number {{ install_slapos_comp1_partition_number }} {{ install_slapos_comp1_computer_name }} --software-root {{ slapos_soft }} --instance-root {{ slapos_inst }}
  when:
    - inventory_hostname == ansible_play_hosts[0]
    - slapos_conf.stat.exists == False

- name: Complete slapos config
  ansible.builtin.shell:
    cmd: |
      sed -i 's/computer_xml = /opt/slapos/slapos.xml@computer_xml = {{ slapos_root }}/slapos.xml@' {{ slapos_etc }}/slapos.cfg
      sed -i 's@/opt/slapos/log@{{ slapos_log }}@' {{ slapos_etc }}/slapos.cfg
      sed -i 's@pid_folder = /srv/slapgrid/var/run@pid_folder = {{ slapos_inst }}/var/run@' {{ slapos_etc }}/slapos.cfg
  args:
    executable: /bin/bash
  register: slapos_cfg_command
  when:
    - inventory_hostname == ansible_play_hosts[0]
    - slapos_conf.stat.exists == False

- name: Enable slapos app management with OpenSVC
  ansible.builtin.command: "om {{ install_slapos_comp1_svcpath }} enable --rid app#1"
  register: enable
  changed_when: enable.rc == 0
  when:
    - inventory_hostname == ansible_play_hosts[0]
    - slapos_conf.stat.exists == False

- name: Start slapos app management with OpenSVC
  ansible.builtin.command: "om {{ install_slapos_comp1_svcpath }} start --rid app#1"
  register: start
  changed_when: start.rc == 0
  when:
    - inventory_hostname == ansible_play_hosts[0]
    - slapos_conf.stat.exists == False

- name: Force status evaluation
  ansible.builtin.command: "om {{ install_slapos_comp1_svcpath }} print status -r"
  changed_when: false
  when:
    - inventory_hostname == ansible_play_hosts[0]
    - slapos_conf.stat.exists == False

- name: Wait for service state up on first node
  ansible.builtin.script:
    cmd: ./files/osvc_wait.sh {{ ansible_hostname }} {{ install_slapos_comp1_svcpath }} avail up 300
  changed_when: false
  when:
    - inventory_hostname == ansible_play_hosts[0]
    - slapos_conf.stat.exists == False

- name: Enable slapos task management with OpenSVC
  ansible.builtin.command: "om {{ install_slapos_comp1_svcpath }} enable --rid task"
  register: output
  changed_when: output.rc == 0
  when:
    - inventory_hostname == ansible_play_hosts[0]
    - slapos_conf.stat.exists == False

- name: Display final service state
  ansible.builtin.command: "om {{ install_slapos_comp1_svcpath }} print status -r"
  changed_when: false
  when:
    - inventory_hostname == ansible_play_hosts[0]
    - slapos_conf.stat.exists == False
